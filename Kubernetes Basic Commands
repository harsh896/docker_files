1. Kuberctl Version check
  -> kubectl version
  
2. Running a pod of nginx image web server
  -> kubectl run my-nginx --image nginx
                 --------
                 Image Name
3. Listing the pods 
  -> kubectl get pods
  
  a) Watch a cmd (without needing watch cmd)
  -> kubectl get pods -w
  
4. See all objects
  -> kubectl get all
  
5. Remove the Deployment & service
  -> kubectl delete deployment/my-nginx
  
  -> kubectl delete service/nginxenv-lb service/nginxenv
  (or)
  -> kubectl delete service/nginxenv-lb deployment/nginxenv
  
6. Scaling up with another pod (both cmds are same)
  -> kubectl scale deploy/my-nginx --replicas 2
  (or)
  -> kubectl scale deployment my-nginx --replicas 2
  
7. Get Container logs
  -> kubectl logs deployment/my-nginx
  expande cmd
  -> kubectl logs deployment/my-nginx --follow --tail 1
  
8. Get a bunch of details about an object, including events
  -> kubectl describe pod/my-nginx-xxxx-yyyy (pod name)
  
9. Deleting a pod
  -> kubectl delete pod/(pod name)
---------------------------------------------------------------------------------------------------------------------------------------
Exposing

10. To expose the port
  -> kubectl expose deployment/my-nginx --port 8888
  
11. To look what IP is allocated
  -> kubectl get service
  
---------------------------------------------------------------------------------------------------------------------------------------
NodePort & LoadBalancer Service

12. Exposing a NodePort
  -> kubectl expose deployment/my-nginx --port 8888 --name nginxenv-np --type NodePort

13. Exposing a ElasticBalancer
  -> kubectl expose deployment/my-nginx --port 8888 --name nginxenv-lb --type LoadBalancer

14. Services in same namespaces
  -> kubectl get namespaces

---------------------------------------------------------------------------------------------------------------------------------------
Run, Create & Expose Generators

15. Dry-Run & output should be in YAML file in generators
  a) deployment it will show all specs in YAML File
  -> kubectl create deployment sample --image nginx --dry-run -o yaml
                                                    --------- -------
                                                    Run outside cluster; output in yaml
  b) job it will show specs of pod in YAML File
  -> kubectl create job sample --image nginx --dry-run -o yaml
  
  c) expose port (first create a deployment in name test)
  -> kubectl create deployment test --image nginx
  -> kubectl expose deployment/test --port 80 --dry-run -o yaml

16. Run Generator CMD
  -> kubectl run test --image nginx --dry-run
  -> kubectl run test --image nginx --port 80 --expose --dry-run
  -> kubectl run test --image nginx --restart OnFailure --dry-run
  -> kubectl run test --image nginx --restart Never --dry-run
  -> kubectl run test --image nginx --schedule "*/1 * * * *" --dry-run

------------------------------------------------------------------------------------------
Kubeneters Imperative:
----------------------
Examples: kubectl run, kubectl create deployment, kubectl update

Kubeneters Declarative:
----------------------
Examples: kubectl applu -f my-resources.yaml

Three management approach
-------------------------
Imperative commands: run, expose, scale, edit, create deployment
Imperative Objects: create -f file.yaml, replace -f file.yaml, delete ...
Declarative Objects: apply -f file.yaml or dir\, diff
---------------------------------------------------------------------------------------------------------------------------------------
